package org.example.expressions.tests

import org.junit.runner.RunWith
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.example.expressions.ExpressionsInjectorProvider
import org.example.expressions.expressions.ExpressionModel
import com.google.inject.Inject
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Test

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(ExpressionsInjectorProvider))
class ExpressionsParserTest {
	
	@Inject extension ParseHelper<ExpressionModel>
	@Inject extension ValidationTestHelper
	
	@Test
	def void testSimpleExpression() {
		'''10'''.parse.assertNoErrors
	}
	
	@Test
	def	void testVariableExpression() {
		'''i = 10'''.parse.assertNoErrors
	}
	
	
	@Test
	def void testSimpleString()  {
		'''"simpleString"'''.parse.assertNoErrors		
	}
	
//	@Test
//	def void testSimpleStringWithoutQuotes() {
//		'''simpleString'''.parse.assertError()
//	}
	
	@Test
	def void testVariableString() {
		'''s = "String with variable"'''.parse.assertNoErrors
	}
	
	
	
	
	
	
	
}