/**
 * generated by Xtext
 */
package org.examples.entities.validation;

import com.google.common.base.Objects;
import java.util.HashSet;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.examples.entities.entities.EntitiesPackage;
import org.examples.entities.entities.Entity;
import org.examples.entities.validation.AbstractEntitiesValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class EntitiesValidator extends AbstractEntitiesValidator {
  @Check
  public Entity checkNoCycleInEntityHierarchy(final Entity entity) {
    Entity _xblockexpression = null;
    {
      Entity _superType = entity.getSuperType();
      boolean _equals = Objects.equal(_superType, null);
      if (_equals) {
        return;
      }
      final HashSet<Entity> visitedEntities = CollectionLiterals.<Entity>newHashSet();
      visitedEntities.add(entity);
      Entity current = entity.getSuperType();
      boolean _notEquals = (!Objects.equal(current, null));
      boolean _while = _notEquals;
      while (_while) {
        {
          String _name = current.getName();
          String _plus = ("cycle in hierarchy of entity \'" + _name);
          String _plus_1 = (_plus + "\'");
          EReference _entity_SuperType = EntitiesPackage.eINSTANCE.getEntity_SuperType();
          this.error(_plus_1, _entity_SuperType);
          return;
        }
        boolean _notEquals_1 = (!Objects.equal(current, null));
        
      }
      visitedEntities.add(current);
      Entity _superType_1 = current.getSuperType();
      Entity _current = current = _superType_1;
      _xblockexpression = (_current);
    }
    return _xblockexpression;
  }
}
