/*
* generated by Xtext
*/
package org.example.smalljava.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SmallJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SJProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsSJImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesSJClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		
		//SJProgram:
		//	("package" name=QualifiedName ";")? imports+=SJImport* classes+=SJClass*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";")? imports+=SJImport* classes+=SJClass*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//imports+=SJImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//SJImport
		public RuleCall getImportsSJImportParserRuleCall_1_0() { return cImportsSJImportParserRuleCall_1_0; }

		//classes+=SJClass*
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//SJClass
		public RuleCall getClassesSJClassParserRuleCall_2_0() { return cClassesSJClassParserRuleCall_2_0; }
	}

	public class SJImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SJImport:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SJClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperclassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperclassSJClassCrossReference_2_1_0 = (CrossReference)cSuperclassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperclassSJClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperclassSJClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersSJMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SJClass:
		//	"class" name=ID ("extends" superclass=[SJClass|QualifiedName])? "{" members+=SJMember* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" superclass=[SJClass|QualifiedName])? "{" members+=SJMember* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superclass=[SJClass|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superclass=[SJClass|QualifiedName]
		public Assignment getSuperclassAssignment_2_1() { return cSuperclassAssignment_2_1; }

		//[SJClass|QualifiedName]
		public CrossReference getSuperclassSJClassCrossReference_2_1_0() { return cSuperclassSJClassCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperclassSJClassQualifiedNameParserRuleCall_2_1_0_1() { return cSuperclassSJClassQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=SJMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//SJMember
		public RuleCall getMembersSJMemberParserRuleCall_4_0() { return cMembersSJMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SJMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SJMember:
		//	SJField | SJMethod;
		public ParserRule getRule() { return rule; }

		//SJField | SJMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//SJField
		public RuleCall getSJFieldParserRuleCall_0() { return cSJFieldParserRuleCall_0; }

		//SJMethod
		public RuleCall getSJMethodParserRuleCall_1() { return cSJMethodParserRuleCall_1; }
	}

	public class SJFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessSJAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSJClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSJClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeSJClassCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SJField:
		//	access=SJAccessLevel? type=[SJClass|QualifiedName] name=ID ";";
		public ParserRule getRule() { return rule; }

		//access=SJAccessLevel? type=[SJClass|QualifiedName] name=ID ";"
		public Group getGroup() { return cGroup; }

		//access=SJAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }

		//SJAccessLevel
		public RuleCall getAccessSJAccessLevelEnumRuleCall_0_0() { return cAccessSJAccessLevelEnumRuleCall_0_0; }

		//type=[SJClass|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[SJClass|QualifiedName]
		public CrossReference getTypeSJClassCrossReference_1_0() { return cTypeSJClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeSJClassQualifiedNameParserRuleCall_1_0_1() { return cTypeSJClassQualifiedNameParserRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SJMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessSJAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSJClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSJClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeSJClassCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsSJParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsSJParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodySJMethodBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//SJMethod:
		//	access=SJAccessLevel? type=[SJClass|QualifiedName] name=ID "(" (params+=SJParameter ("," params+=SJParameter)*)? ")"
		//	body=SJMethodBody;
		public ParserRule getRule() { return rule; }

		//access=SJAccessLevel? type=[SJClass|QualifiedName] name=ID "(" (params+=SJParameter ("," params+=SJParameter)*)? ")"
		//body=SJMethodBody
		public Group getGroup() { return cGroup; }

		//access=SJAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }

		//SJAccessLevel
		public RuleCall getAccessSJAccessLevelEnumRuleCall_0_0() { return cAccessSJAccessLevelEnumRuleCall_0_0; }

		//type=[SJClass|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[SJClass|QualifiedName]
		public CrossReference getTypeSJClassCrossReference_1_0() { return cTypeSJClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeSJClassQualifiedNameParserRuleCall_1_0_1() { return cTypeSJClassQualifiedNameParserRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=SJParameter ("," params+=SJParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=SJParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//SJParameter
		public RuleCall getParamsSJParameterParserRuleCall_4_0_0() { return cParamsSJParameterParserRuleCall_4_0_0; }

		//("," params+=SJParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=SJParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//SJParameter
		public RuleCall getParamsSJParameterParserRuleCall_4_1_1_0() { return cParamsSJParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=SJMethodBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//SJMethodBody
		public RuleCall getBodySJMethodBodyParserRuleCall_6_0() { return cBodySJMethodBodyParserRuleCall_6_0; }
	}

	public class SJParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSJClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSJClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeSJClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SJParameter:
		//	type=[SJClass|QualifiedName] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[SJClass|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }

		//type=[SJClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[SJClass|QualifiedName]
		public CrossReference getTypeSJClassCrossReference_0_0() { return cTypeSJClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeSJClassQualifiedNameParserRuleCall_0_0_1() { return cTypeSJClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class SJMethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJMethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSJMethodBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsSJStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SJMethodBody:
		//	{SJMethodBody} "{" statements+=SJStatement* "}";
		public ParserRule getRule() { return rule; }

		//{SJMethodBody} "{" statements+=SJStatement* "}"
		public Group getGroup() { return cGroup; }

		//{SJMethodBody}
		public Action getSJMethodBodyAction_0() { return cSJMethodBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=SJStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//SJStatement
		public RuleCall getStatementsSJStatementParserRuleCall_2_0() { return cStatementsSJStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SJStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSJExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cSJIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SJStatement:
		//	SJVariableDeclaration | SJReturn | SJExpression ";" | SJIfStatement;
		public ParserRule getRule() { return rule; }

		//SJVariableDeclaration | SJReturn | SJExpression ";" | SJIfStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SJVariableDeclaration
		public RuleCall getSJVariableDeclarationParserRuleCall_0() { return cSJVariableDeclarationParserRuleCall_0; }

		//SJReturn
		public RuleCall getSJReturnParserRuleCall_1() { return cSJReturnParserRuleCall_1; }

		//SJExpression ";"
		public Group getGroup_2() { return cGroup_2; }

		//SJExpression
		public RuleCall getSJExpressionParserRuleCall_2_0() { return cSJExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//SJIfStatement
		public RuleCall getSJIfStatementParserRuleCall_3() { return cSJIfStatementParserRuleCall_3; }
	}

	public class SJReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSJExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SJReturn:
		//	"return" expression=SJExpression ";";
		public ParserRule getRule() { return rule; }

		//"return" expression=SJExpression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=SJExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SJExpression
		public RuleCall getExpressionSJExpressionParserRuleCall_1_0() { return cExpressionSJExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SJVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSJClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSJClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeSJClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionSJExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SJVariableDeclaration:
		//	type=[SJClass|QualifiedName] name=ID "=" expression=SJExpression ";";
		public ParserRule getRule() { return rule; }

		//type=[SJClass|QualifiedName] name=ID "=" expression=SJExpression ";"
		public Group getGroup() { return cGroup; }

		//type=[SJClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[SJClass|QualifiedName]
		public CrossReference getTypeSJClassCrossReference_0_0() { return cTypeSJClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeSJClassQualifiedNameParserRuleCall_0_0_1() { return cTypeSJClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=SJExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//SJExpression
		public RuleCall getExpressionSJExpressionParserRuleCall_3_0() { return cExpressionSJExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SJIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSJExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockSJIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockSJIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//SJIfStatement:
		//	"if" "(" expression=SJExpression ")" thenBlock=SJIfBlock ("else" elseBlock=SJIfBlock)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expression=SJExpression ")" thenBlock=SJIfBlock ("else" elseBlock=SJIfBlock)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=SJExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//SJExpression
		public RuleCall getExpressionSJExpressionParserRuleCall_2_0() { return cExpressionSJExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//thenBlock=SJIfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }

		//SJIfBlock
		public RuleCall getThenBlockSJIfBlockParserRuleCall_4_0() { return cThenBlockSJIfBlockParserRuleCall_4_0; }

		//(=> "else" elseBlock=SJIfBlock)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseBlock=SJIfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }

		//SJIfBlock
		public RuleCall getElseBlockSJIfBlockParserRuleCall_5_1_0() { return cElseBlockSJIfBlockParserRuleCall_5_1_0; }
	}

	public class SJIfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJIfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsSJStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementsSJStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SJIfBlock:
		//	statements+=SJStatement | "{" statements+=SJStatement+ "}";
		public ParserRule getRule() { return rule; }

		//statements+=SJStatement | "{" statements+=SJStatement+ "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//statements+=SJStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//SJStatement
		public RuleCall getStatementsSJStatementParserRuleCall_0_0() { return cStatementsSJStatementParserRuleCall_0_0; }

		//"{" statements+=SJStatement+ "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//statements+=SJStatement+
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//SJStatement
		public RuleCall getStatementsSJStatementParserRuleCall_1_1_0() { return cStatementsSJStatementParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class SJBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJMethodBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJIfBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SJBlock:
		//	SJMethodBody | SJIfBlock;
		public ParserRule getRule() { return rule; }

		//SJMethodBody | SJIfBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//SJMethodBody
		public RuleCall getSJMethodBodyParserRuleCall_0() { return cSJMethodBodyParserRuleCall_0; }

		//SJIfBlock
		public RuleCall getSJIfBlockParserRuleCall_1() { return cSJIfBlockParserRuleCall_1; }
	}

	public class SJSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SJSymbol:
		//	SJVariableDeclaration | SJParameter;
		public ParserRule getRule() { return rule; }

		//SJVariableDeclaration | SJParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//SJVariableDeclaration
		public RuleCall getSJVariableDeclarationParserRuleCall_0() { return cSJVariableDeclarationParserRuleCall_0; }

		//SJParameter
		public RuleCall getSJParameterParserRuleCall_1() { return cSJParameterParserRuleCall_1; }
	}

	public class SJExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJExpression");
		private final RuleCall cSJAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SJExpression:
		//	SJAssignment;
		public ParserRule getRule() { return rule; }

		//SJAssignment
		public RuleCall getSJAssignmentParserRuleCall() { return cSJAssignmentParserRuleCall; }
	}

	public class SJAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSJAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSJExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SJAssignment returns SJExpression:
		//	SJSelectionExpression ({SJAssignment.left=current} "=" right=SJExpression)?;
		public ParserRule getRule() { return rule; }

		//SJSelectionExpression ({SJAssignment.left=current} "=" right=SJExpression)?
		public Group getGroup() { return cGroup; }

		//SJSelectionExpression
		public RuleCall getSJSelectionExpressionParserRuleCall_0() { return cSJSelectionExpressionParserRuleCall_0; }

		//({SJAssignment.left=current} "=" right=SJExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{SJAssignment.left=current}
		public Action getSJAssignmentLeftAction_1_0() { return cSJAssignmentLeftAction_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//right=SJExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SJExpression
		public RuleCall getRightSJExpressionParserRuleCall_1_2_0() { return cRightSJExpressionParserRuleCall_1_2_0; }
	}

	public class SJSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSJMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberSJMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberSJMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberSJMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cMethodinvocationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cMethodinvocationLeftParenthesisKeyword_1_3_0_0 = (Keyword)cMethodinvocationAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsSJExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsSJExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//SJSelectionExpression returns SJExpression:
		//	SJTerminalExpression ({SJMemberSelection.receiver=current} "." member=[SJMember] (methodinvocation?="("
		//	(args+=SJExpression ("," args+=SJExpression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//SJTerminalExpression ({SJMemberSelection.receiver=current} "." member=[SJMember] (methodinvocation?="("
		//(args+=SJExpression ("," args+=SJExpression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//SJTerminalExpression
		public RuleCall getSJTerminalExpressionParserRuleCall_0() { return cSJTerminalExpressionParserRuleCall_0; }

		//({SJMemberSelection.receiver=current} "." member=[SJMember] (methodinvocation?="(" (args+=SJExpression (","
		//args+=SJExpression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{SJMemberSelection.receiver=current}
		public Action getSJMemberSelectionReceiverAction_1_0() { return cSJMemberSelectionReceiverAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//member=[SJMember]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }

		//[SJMember]
		public CrossReference getMemberSJMemberCrossReference_1_2_0() { return cMemberSJMemberCrossReference_1_2_0; }

		//ID
		public RuleCall getMemberSJMemberIDTerminalRuleCall_1_2_0_1() { return cMemberSJMemberIDTerminalRuleCall_1_2_0_1; }

		//(methodinvocation?="(" (args+=SJExpression ("," args+=SJExpression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//methodinvocation?="("
		public Assignment getMethodinvocationAssignment_1_3_0() { return cMethodinvocationAssignment_1_3_0; }

		//"("
		public Keyword getMethodinvocationLeftParenthesisKeyword_1_3_0_0() { return cMethodinvocationLeftParenthesisKeyword_1_3_0_0; }

		//(args+=SJExpression ("," args+=SJExpression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//args+=SJExpression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }

		//SJExpression
		public RuleCall getArgsSJExpressionParserRuleCall_1_3_1_0_0() { return cArgsSJExpressionParserRuleCall_1_3_1_0_0; }

		//("," args+=SJExpression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }

		//args+=SJExpression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }

		//SJExpression
		public RuleCall getArgsSJExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsSJExpressionParserRuleCall_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}

	public class SJTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSJStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSJIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSJBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSJThisAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cThisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSJSuperAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSuperKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSJNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSJSymbolRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cSymbolAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSymbolSJSymbolCrossReference_6_1_0 = (CrossReference)cSymbolAssignment_6_1.eContents().get(0);
		private final RuleCall cSymbolSJSymbolIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSymbolSJSymbolCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cSJNewAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cTypeSJClassCrossReference_7_2_0 = (CrossReference)cTypeAssignment_7_2.eContents().get(0);
		private final RuleCall cTypeSJClassQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cTypeSJClassCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cSJExpressionParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//SJTerminalExpression returns SJExpression:
		//	{SJStringConstant} value=STRING | {SJIntConstant} value=INT | {SJBoolConstant} value=("true" | "false") | {SJThis}
		//	"this" | {SJSuper} "super" | {SJNull} "null" | {SJSymbolRef} symbol=[SJSymbol] | {SJNew} "new"
		//	type=[SJClass|QualifiedName] "(" ")" | "(" SJExpression ")";
		public ParserRule getRule() { return rule; }

		//{SJStringConstant} value=STRING | {SJIntConstant} value=INT | {SJBoolConstant} value=("true" | "false") | {SJThis}
		//"this" | {SJSuper} "super" | {SJNull} "null" | {SJSymbolRef} symbol=[SJSymbol] | {SJNew} "new"
		//type=[SJClass|QualifiedName] "(" ")" | "(" SJExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SJStringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{SJStringConstant}
		public Action getSJStringConstantAction_0_0() { return cSJStringConstantAction_0_0; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//{SJIntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{SJIntConstant}
		public Action getSJIntConstantAction_1_0() { return cSJIntConstantAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{SJBoolConstant} value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//{SJBoolConstant}
		public Action getSJBoolConstantAction_2_0() { return cSJBoolConstantAction_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//{SJThis} "this"
		public Group getGroup_3() { return cGroup_3; }

		//{SJThis}
		public Action getSJThisAction_3_0() { return cSJThisAction_3_0; }

		//"this"
		public Keyword getThisKeyword_3_1() { return cThisKeyword_3_1; }

		//{SJSuper} "super"
		public Group getGroup_4() { return cGroup_4; }

		//{SJSuper}
		public Action getSJSuperAction_4_0() { return cSJSuperAction_4_0; }

		//"super"
		public Keyword getSuperKeyword_4_1() { return cSuperKeyword_4_1; }

		//{SJNull} "null"
		public Group getGroup_5() { return cGroup_5; }

		//{SJNull}
		public Action getSJNullAction_5_0() { return cSJNullAction_5_0; }

		//"null"
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }

		//{SJSymbolRef} symbol=[SJSymbol]
		public Group getGroup_6() { return cGroup_6; }

		//{SJSymbolRef}
		public Action getSJSymbolRefAction_6_0() { return cSJSymbolRefAction_6_0; }

		//symbol=[SJSymbol]
		public Assignment getSymbolAssignment_6_1() { return cSymbolAssignment_6_1; }

		//[SJSymbol]
		public CrossReference getSymbolSJSymbolCrossReference_6_1_0() { return cSymbolSJSymbolCrossReference_6_1_0; }

		//ID
		public RuleCall getSymbolSJSymbolIDTerminalRuleCall_6_1_0_1() { return cSymbolSJSymbolIDTerminalRuleCall_6_1_0_1; }

		//{SJNew} "new" type=[SJClass|QualifiedName] "(" ")"
		public Group getGroup_7() { return cGroup_7; }

		//{SJNew}
		public Action getSJNewAction_7_0() { return cSJNewAction_7_0; }

		//"new"
		public Keyword getNewKeyword_7_1() { return cNewKeyword_7_1; }

		//type=[SJClass|QualifiedName]
		public Assignment getTypeAssignment_7_2() { return cTypeAssignment_7_2; }

		//[SJClass|QualifiedName]
		public CrossReference getTypeSJClassCrossReference_7_2_0() { return cTypeSJClassCrossReference_7_2_0; }

		//QualifiedName
		public RuleCall getTypeSJClassQualifiedNameParserRuleCall_7_2_0_1() { return cTypeSJClassQualifiedNameParserRuleCall_7_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_3() { return cLeftParenthesisKeyword_7_3; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//"(" SJExpression ")"
		public Group getGroup_8() { return cGroup_8; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//SJExpression
		public RuleCall getSJExpressionParserRuleCall_8_1() { return cSJExpressionParserRuleCall_8_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
	}
	
	
	public class SJAccessLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SJAccessLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPublicKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SJAccessLevel:
		//	PRIVATE="private" | PUBLIC="public" | PROTECTED="protected";
		public EnumRule getRule() { return rule; }

		//PRIVATE="private" | PUBLIC="public" | PROTECTED="protected"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }

		//"public"
		public Keyword getPUBLICPublicKeyword_1_0() { return cPUBLICPublicKeyword_1_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }
	}
	
	private SJProgramElements pSJProgram;
	private SJImportElements pSJImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private SJClassElements pSJClass;
	private SJMemberElements pSJMember;
	private SJFieldElements pSJField;
	private SJMethodElements pSJMethod;
	private SJAccessLevelElements unknownRuleSJAccessLevel;
	private SJParameterElements pSJParameter;
	private SJMethodBodyElements pSJMethodBody;
	private SJStatementElements pSJStatement;
	private SJReturnElements pSJReturn;
	private SJVariableDeclarationElements pSJVariableDeclaration;
	private SJIfStatementElements pSJIfStatement;
	private SJIfBlockElements pSJIfBlock;
	private SJBlockElements pSJBlock;
	private SJSymbolElements pSJSymbol;
	private SJExpressionElements pSJExpression;
	private SJAssignmentElements pSJAssignment;
	private SJSelectionExpressionElements pSJSelectionExpression;
	private SJTerminalExpressionElements pSJTerminalExpression;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallJavaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.smalljava.SmallJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SJProgram:
	//	("package" name=QualifiedName ";")? imports+=SJImport* classes+=SJClass*;
	public SJProgramElements getSJProgramAccess() {
		return (pSJProgram != null) ? pSJProgram : (pSJProgram = new SJProgramElements());
	}
	
	public ParserRule getSJProgramRule() {
		return getSJProgramAccess().getRule();
	}

	//SJImport:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public SJImportElements getSJImportAccess() {
		return (pSJImport != null) ? pSJImport : (pSJImport = new SJImportElements());
	}
	
	public ParserRule getSJImportRule() {
		return getSJImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//SJClass:
	//	"class" name=ID ("extends" superclass=[SJClass|QualifiedName])? "{" members+=SJMember* "}";
	public SJClassElements getSJClassAccess() {
		return (pSJClass != null) ? pSJClass : (pSJClass = new SJClassElements());
	}
	
	public ParserRule getSJClassRule() {
		return getSJClassAccess().getRule();
	}

	//SJMember:
	//	SJField | SJMethod;
	public SJMemberElements getSJMemberAccess() {
		return (pSJMember != null) ? pSJMember : (pSJMember = new SJMemberElements());
	}
	
	public ParserRule getSJMemberRule() {
		return getSJMemberAccess().getRule();
	}

	//SJField:
	//	access=SJAccessLevel? type=[SJClass|QualifiedName] name=ID ";";
	public SJFieldElements getSJFieldAccess() {
		return (pSJField != null) ? pSJField : (pSJField = new SJFieldElements());
	}
	
	public ParserRule getSJFieldRule() {
		return getSJFieldAccess().getRule();
	}

	//SJMethod:
	//	access=SJAccessLevel? type=[SJClass|QualifiedName] name=ID "(" (params+=SJParameter ("," params+=SJParameter)*)? ")"
	//	body=SJMethodBody;
	public SJMethodElements getSJMethodAccess() {
		return (pSJMethod != null) ? pSJMethod : (pSJMethod = new SJMethodElements());
	}
	
	public ParserRule getSJMethodRule() {
		return getSJMethodAccess().getRule();
	}

	//enum SJAccessLevel:
	//	PRIVATE="private" | PUBLIC="public" | PROTECTED="protected";
	public SJAccessLevelElements getSJAccessLevelAccess() {
		return (unknownRuleSJAccessLevel != null) ? unknownRuleSJAccessLevel : (unknownRuleSJAccessLevel = new SJAccessLevelElements());
	}
	
	public EnumRule getSJAccessLevelRule() {
		return getSJAccessLevelAccess().getRule();
	}

	//SJParameter:
	//	type=[SJClass|QualifiedName] name=ID;
	public SJParameterElements getSJParameterAccess() {
		return (pSJParameter != null) ? pSJParameter : (pSJParameter = new SJParameterElements());
	}
	
	public ParserRule getSJParameterRule() {
		return getSJParameterAccess().getRule();
	}

	//SJMethodBody:
	//	{SJMethodBody} "{" statements+=SJStatement* "}";
	public SJMethodBodyElements getSJMethodBodyAccess() {
		return (pSJMethodBody != null) ? pSJMethodBody : (pSJMethodBody = new SJMethodBodyElements());
	}
	
	public ParserRule getSJMethodBodyRule() {
		return getSJMethodBodyAccess().getRule();
	}

	//SJStatement:
	//	SJVariableDeclaration | SJReturn | SJExpression ";" | SJIfStatement;
	public SJStatementElements getSJStatementAccess() {
		return (pSJStatement != null) ? pSJStatement : (pSJStatement = new SJStatementElements());
	}
	
	public ParserRule getSJStatementRule() {
		return getSJStatementAccess().getRule();
	}

	//SJReturn:
	//	"return" expression=SJExpression ";";
	public SJReturnElements getSJReturnAccess() {
		return (pSJReturn != null) ? pSJReturn : (pSJReturn = new SJReturnElements());
	}
	
	public ParserRule getSJReturnRule() {
		return getSJReturnAccess().getRule();
	}

	//SJVariableDeclaration:
	//	type=[SJClass|QualifiedName] name=ID "=" expression=SJExpression ";";
	public SJVariableDeclarationElements getSJVariableDeclarationAccess() {
		return (pSJVariableDeclaration != null) ? pSJVariableDeclaration : (pSJVariableDeclaration = new SJVariableDeclarationElements());
	}
	
	public ParserRule getSJVariableDeclarationRule() {
		return getSJVariableDeclarationAccess().getRule();
	}

	//SJIfStatement:
	//	"if" "(" expression=SJExpression ")" thenBlock=SJIfBlock ("else" elseBlock=SJIfBlock)?;
	public SJIfStatementElements getSJIfStatementAccess() {
		return (pSJIfStatement != null) ? pSJIfStatement : (pSJIfStatement = new SJIfStatementElements());
	}
	
	public ParserRule getSJIfStatementRule() {
		return getSJIfStatementAccess().getRule();
	}

	//SJIfBlock:
	//	statements+=SJStatement | "{" statements+=SJStatement+ "}";
	public SJIfBlockElements getSJIfBlockAccess() {
		return (pSJIfBlock != null) ? pSJIfBlock : (pSJIfBlock = new SJIfBlockElements());
	}
	
	public ParserRule getSJIfBlockRule() {
		return getSJIfBlockAccess().getRule();
	}

	//SJBlock:
	//	SJMethodBody | SJIfBlock;
	public SJBlockElements getSJBlockAccess() {
		return (pSJBlock != null) ? pSJBlock : (pSJBlock = new SJBlockElements());
	}
	
	public ParserRule getSJBlockRule() {
		return getSJBlockAccess().getRule();
	}

	//SJSymbol:
	//	SJVariableDeclaration | SJParameter;
	public SJSymbolElements getSJSymbolAccess() {
		return (pSJSymbol != null) ? pSJSymbol : (pSJSymbol = new SJSymbolElements());
	}
	
	public ParserRule getSJSymbolRule() {
		return getSJSymbolAccess().getRule();
	}

	//SJExpression:
	//	SJAssignment;
	public SJExpressionElements getSJExpressionAccess() {
		return (pSJExpression != null) ? pSJExpression : (pSJExpression = new SJExpressionElements());
	}
	
	public ParserRule getSJExpressionRule() {
		return getSJExpressionAccess().getRule();
	}

	//SJAssignment returns SJExpression:
	//	SJSelectionExpression ({SJAssignment.left=current} "=" right=SJExpression)?;
	public SJAssignmentElements getSJAssignmentAccess() {
		return (pSJAssignment != null) ? pSJAssignment : (pSJAssignment = new SJAssignmentElements());
	}
	
	public ParserRule getSJAssignmentRule() {
		return getSJAssignmentAccess().getRule();
	}

	//SJSelectionExpression returns SJExpression:
	//	SJTerminalExpression ({SJMemberSelection.receiver=current} "." member=[SJMember] (methodinvocation?="("
	//	(args+=SJExpression ("," args+=SJExpression)*)? ")")?)*;
	public SJSelectionExpressionElements getSJSelectionExpressionAccess() {
		return (pSJSelectionExpression != null) ? pSJSelectionExpression : (pSJSelectionExpression = new SJSelectionExpressionElements());
	}
	
	public ParserRule getSJSelectionExpressionRule() {
		return getSJSelectionExpressionAccess().getRule();
	}

	//SJTerminalExpression returns SJExpression:
	//	{SJStringConstant} value=STRING | {SJIntConstant} value=INT | {SJBoolConstant} value=("true" | "false") | {SJThis}
	//	"this" | {SJSuper} "super" | {SJNull} "null" | {SJSymbolRef} symbol=[SJSymbol] | {SJNew} "new"
	//	type=[SJClass|QualifiedName] "(" ")" | "(" SJExpression ")";
	public SJTerminalExpressionElements getSJTerminalExpressionAccess() {
		return (pSJTerminalExpression != null) ? pSJTerminalExpression : (pSJTerminalExpression = new SJTerminalExpressionElements());
	}
	
	public ParserRule getSJTerminalExpressionRule() {
		return getSJTerminalExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
